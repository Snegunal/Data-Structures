class Entrada:
    def __init__(self, clave, valor):
        self.clave = clave
        self.valor = valor

class TablaHash:
    def __init__(self, tama√±o=10):
        self.tama√±o = tama√±o
        self.tabla = [[] for _ in range(tama√±o)]  # Encadenamiento con listas

    def _hash(self, clave):
        # Funci√≥n hash simple: suma de caracteres
        return sum(ord(c) for c in clave) % self.tama√±o

    def insertar(self, clave, valor):
        indice = self._hash(clave)
        for entrada in self.tabla[indice]:
            if entrada.clave == clave:
                entrada.valor = valor  # Actualizar si ya existe
                return
        self.tabla[indice].append(Entrada(clave, valor))

    def buscar(self, clave):
        indice = self._hash(clave)
        for entrada in self.tabla[indice]:
            if entrada.clave == clave:
                return entrada.valor
        return None

    def eliminar(self, clave):
        indice = self._hash(clave)
        for i, entrada in enumerate(self.tabla[indice]):
            if entrada.clave == clave:
                del self.tabla[indice][i]
                return True
        return False

    def mostrar_todo(self):
        for i, lista in enumerate(self.tabla):
            print(f"√çndice {i}: ", end="")
            for entrada in lista:
                print(f"{entrada.clave} ‚Üí {entrada.valor}", end=" | ")
            print()

class NodoTrie:
    def __init__(self):
        self.hijos = {}
        self.es_fin = False

class Trie:
    def __init__(self):
        self.raiz = NodoTrie()

    def insertar(self, palabra):
        nodo = self.raiz
        for letra in palabra:
            if letra not in nodo.hijos:
                nodo.hijos[letra] = NodoTrie()
            nodo = nodo.hijos[letra]
        nodo.es_fin = True

    def buscar(self, palabra):
        nodo = self.raiz
        for letra in palabra:
            if letra not in nodo.hijos:
                return False
            nodo = nodo.hijos[letra]
        return nodo.es_fin

    def sugerencias(self, prefijo):
        resultados = []
        nodo = self.raiz
        for letra in prefijo:
            if letra not in nodo.hijos:
                return []  # No hay palabras con ese prefijo
            nodo = nodo.hijos[letra]
        self._dfs(nodo, prefijo, resultados)
        return resultados

    def _dfs(self, nodo, camino, resultados):
        if nodo.es_fin:
            resultados.append(camino)
        for letra, hijo in nodo.hijos.items():
            self._dfs(hijo, camino + letra, resultados)


def menu():
    diccionario = TablaHash()
    historial = []

    while True:
        print("\n--- Men√∫ Diccionario ---")
        print("1. Agregar palabra")
        print("2. Buscar palabra")
        print("3. Eliminar palabra")
        print("4. Mostrar todo")
        print("5. Ver historial de b√∫squeda")
        print("6. Salir")

        opcion = input("Opci√≥n: ")

        if opcion == "1":
            clave = input("Palabra en ingl√©s: ").lower()
            valor = input("Traducci√≥n: ").lower()
            diccionario.insertar(clave, valor)
            print("‚úÖ Palabra agregada.")
        elif opcion == "2":
            clave = input("Palabra a buscar: ").lower()
            valor = diccionario.buscar(clave)
            if valor:
                print(f"{clave} ‚Üí {valor}")
                historial.append(clave)
            else:
                print("‚ùå Palabra no encontrada.")
        elif opcion == "3":
            clave = input("Palabra a eliminar: ").lower()
            if diccionario.eliminar(clave):
                print("‚úÖ Palabra eliminada.")
            else:
                print("‚ùå No se encontr√≥ esa palabra.")
        elif opcion == "4":
            diccionario.mostrar_todo()
        elif opcion == "5":
            print("üìú Historial de b√∫squeda:")
            for palabra in reversed(historial):
                print("-", palabra)
        elif opcion == "6":
            print("üëã Hasta luego.")
            break
        else:
            print("Opci√≥n no v√°lida.")
# Ejecutar el men√∫
trie = Trie()
menu()
